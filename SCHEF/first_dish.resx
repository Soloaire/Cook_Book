<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label1.Text" xml:space="preserve">
    <value>Борщ

Ингредиенты:
- Свинина 
- Свекла 
- Картофель 
- Морковь 
- Чеснок 
- Растительное масло

Рецепт:

Для этого мясо поварим минут 40-50. 
Чистим морковь и сладкий перец. 
Измельчим морковь и перец в блендере. 
Свеклу очищаем и натираем на крупной 
терке.
На разогретой сковородке обжариваем на
растительном масле свеклу минут 8-10.
Добавляем мелко порезанный чеснок и 
обжариваем еще минуту. 
Очищаем картофель и отправляем вариться
в бульон. 
На сковородку к свекле отправляем морковь 
с перцем.
Добавляем пару ложек воды и тушим минут
8-10. 
Заправку со сковородки отправляем в бульон
с картофелем.
Добавляем остальную соль, перец. 
Варим минут 5 после кипения. 

</value>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>Солянка 

Ингредиенты:
- Говядина
- Колбаса копченая
- Колбаса молочная
- Огурец
- Лук
- Лавровый лист
- Оливки
- Зелень
- Лимон
- Сметана
- Растительное масло

Рецепт:

Вымыть мясо,
Положите в кастрюлю, добавьте лавровый
лист, перец горошком и залейте водой. 
Посолите и варите на медленном огне с 
момента закипания 1,5 часа.
Очищенные овощи порежьте не слишком
крупно.
Обжарьте овощи на растительном масле, 
посолите по вкусу. 
Добавьте томатную пасту и протушите еще
5 минут.
Готовые овощи снимите с огня. 
Вареные сердце и ребрышки достаньте из 
бульона. 
Порежьте мясо кубиками среднего размера. 
Верните мясо в бульон. 
Порежьте маринованные огурцы соломкой. 
Оба вида колбас порежьте кубиками.
Добавьте в бульон к мясу огурцы, два вида 
колбасы, жареные овощи с томатом. 
Проварите 5 минут. 
</value>
  </data>
  <data name="label3.Text" xml:space="preserve">
    <value>Окрошка

Ингредиенты:
- Колбаса молочная
- Картофель
- Огурец
- Яйцо
- Зелень
- Сметана
- Квас

Рецепт:

Нарезать вареную колбасу небольшими кубиками. 
Огурец нарезать небольшими кубиками. 
Отварные куриные яйца  остудить, очистить и 
нарезать кубиками. 
Свежую зелень нарезаем мелко. 
Отварной картофель очистим от шкурки 
и нарежем кубиком. 
Картофель, огурцы, колбасу, яйца и зелень 
поместите в емкость. 
Залейте содержимое кастрюли квасом. 
</value>
  </data>
  <data name="label4.Text" xml:space="preserve">
    <value>Рассольник

Ингредиенты:
- Курица
- Огурец
- Перловка
- Картофель
- Морковь
- Лук
- Масло
- Лавровый лист

Рецепт:

Мясо кладем в кастрюлю примерно на 4 литра.
Доводим до кипения и варим на медленном огне,
снимая пену. 
Перловку замочите заранее, еще с вечера. 
Когда пена перестанет выделяться, примерно
минут через 20 кипения. 
Заложите перловку. 
Лук мелко порезать и обжарить на масле с
тертой морковкой. 
Огурцы мелко порезать. 
Готовое мясо достать из бульона и порезать
на мелкие кусочки. 
Мясо заложить назад в бульон. 
Добавить картофель.
Добавить через 20 минут лук и морковь. 
Добавить огурцы. 
Добавить специи и рассол. 
Суп поварить еще 3-5 минут.
Дать настояться минут двадцать. 
</value>
  </data>
  <data name="label5.Text" xml:space="preserve">
    <value>Уха домашняя

Ингредиенты:
- Рыба
- Лавровый лист
- Морковь
- Лук
- Сельдерей
- Петрушка
- Укроп

Рецепт:

Поместите разделанную рыбу в кастрюлю 
с перцем,
лавровым листом и залейте ее водой. 
Доведите воду до кипения и варить около 
20 минут, 
пока рыба не будет готова до конца. 
Процедите рыбный бульон через мелкое
 сито. 
Уберите из кастрюли перец и лавровый лист. 
Отставьте рыбу в сторону, чтобы она остыла. 
Когда остынет, разберите рыбу, удалив все 
кости и отставьте в сторону. 
Добавьте в рыбный бульон резанный 
картофель и морковь. 
Добавьте в бульон лук и сельдерей. 
Варите около 15 минут, пока картофель 
не будет готов. 
Добавить в суп рыбу и украсьте свежей 
зеленью. 
</value>
  </data>
</root>